# -*- coding: utf-8 -*-
"""project_buyer_age.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1RyMPds64sJxE1Y35kYyH-UskqoFg3K
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Sequential

# Функция загрузки тренировочных данных
def load_train(path):
    # Загрузка данных из файла CSV в датафрейм
    train_df = pd.read_csv(path + 'labels.csv')

    datagen = ImageDataGenerator(rescale=1.0/255, horizontal_flip=False, vertical_flip=False, validation_split=0.2)

    train_datagen_flow = datagen.flow_from_dataframe(
        dataframe=train_df,
        directory=path + 'final_files/',
        x_col='file_name',  # Название колонки с именами файлов изображений
        y_col='real_age',   # Название колонки с целевыми значениями (возраст)
        target_size=(224, 224),
        batch_size=16,
        class_mode='raw',  # Для регрессии используем 'raw'
        seed=12345,
        subset='training'
    )

    return train_datagen_flow

# Функция загрузки тестовых данных
def load_test(path):
    # Загрузка данных из файла CSV в датафрейм
    test_df = pd.read_csv(path + 'labels.csv')

    datagen = ImageDataGenerator(rescale=1.0/255, horizontal_flip=False, vertical_flip=False, validation_split=0.2)

    test_datagen_flow = datagen.flow_from_dataframe(
        dataframe=test_df,
        directory=path + 'final_files/',
        x_col='file_name',  # Название колонки с именами файлов изображений
        y_col='real_age',   # Название колонки с целевыми значениями (возраст)
        target_size=(224, 224),
        batch_size=16,
        class_mode='raw',  # Для регрессии используем 'raw'
        seed=12345,
        subset='validation'
    )

    return test_datagen_flow

# Создание модели
def create_model(input_shape):
    base_model = ResNet50(input_shape=input_shape, include_top=False, weights='/datasets/keras_models/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5')
    model = Sequential()
    model.add(base_model)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(1, activation='relu'))
    model.compile(optimizer=Adam(lr=0.0001), loss='mean_squared_error', metrics=['mae'])

    return model

# Обучение модели
def train_model(model, train_data, test_data, batch_size=None, epochs=3, steps_per_epoch=None, validation_steps=None):
    train_datagen_flow = train_data
    test_datagen_flow = test_data

    model.fit(
        train_datagen_flow,
        validation_data=test_datagen_flow,
        steps_per_epoch=steps_per_epoch,
        validation_steps=validation_steps,
        epochs=epochs,
        verbose=2,
        shuffle=True
    )

    return model